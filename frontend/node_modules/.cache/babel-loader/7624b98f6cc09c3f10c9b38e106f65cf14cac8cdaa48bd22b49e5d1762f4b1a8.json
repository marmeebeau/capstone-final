{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:1337/api'; // Replace with your Strapi backend URL\n\nconst setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\nconst token = localStorage.getItem('token');\nsetAuthToken(token);\n\n// Register a new coordinator\nexport const signup = async formData => {\n  try {\n    const response = await axios.post(`${API_URL}/coordinators/register`, {\n      data: formData\n    });\n    if (response.data.jwt) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data, _error$response$data$;\n    console.error('Signup error:', error); // Log the entire error object\n    // Ensure to access the error response and get a meaningful message\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.error) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.message) || 'Signup failed. Please try again.';\n    throw new Error(errorMessage); // Ensure this throws a string message\n  }\n};\n\n// Login a user (coordinator or admin)\nexport const login = async (identifier, password) => {\n  try {\n    const response = await axios.post('http://localhost:1337/api/coordinators/login', {\n      identifier,\n      password\n    });\n    console.log(\"Logging in with:\", {\n      identifier,\n      password\n    });\n    console.log('Response from API:', response.data);\n    const {\n      coordinator,\n      token\n    } = response.data; // Make sure these keys match the API response\n\n    // If token is not returned, throw an error\n    if (!token) {\n      console.error('No token received from the server.');\n      throw new Error('Login failed, no token received.');\n    }\n\n    // Store user with JWT in local storage\n    const userWithToken = {\n      ...coordinator,\n      jwt: token // Add the JWT to the user object\n    };\n    localStorage.setItem('user', JSON.stringify(userWithToken)); // Store the user with token\n\n    return userWithToken; // Return the user object with token\n  } catch (error) {\n    var _error$response2, _error$response2$data, _error$response2$data2;\n    const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : (_error$response2$data2 = _error$response2$data.error) === null || _error$response2$data2 === void 0 ? void 0 : _error$response2$data2.message) || 'Error logging in. Please check your credentials';\n    console.error(\"Error during login:\", errorMessage);\n    throw new Error(errorMessage);\n  }\n};\n\n// Logout a user by removing the token from localStorage\nexport const logout = () => {\n  localStorage.removeItem('user');\n};\n\n// Get the current authenticated user from localStorage\nexport const getCurrentUser = () => {\n  const user = JSON.parse(localStorage.getItem('user')); // Retrieve the user object\n  return user; // Return user object which includes JWT\n};\n\n// Check if a user is authenticated by checking the presence of a token\nexport const isAuthenticated = () => {\n  const user = getCurrentUser();\n  return user && user.jwt ? true : false;\n};\n\n// Get the user profile by ID\nexport const getProfile = async userId => {\n  try {\n    const response = await axios.get(`${API_URL}/coordinators/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${getCurrentUser().jwt}` // Include the token in the headers\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching profile:', error);\n    throw new Error('Failed to fetch profile data');\n  }\n};\n\n// Update the user profile\nexport const updateProfile = async (userId, profileData) => {\n  try {\n    const response = await axios.put(`http://localhost:1337/api/coordinators/${userId}`, profileData);\n    return response.data; // Return the response data if the request is successful\n  } catch (error) {\n    console.error(\"Error updating profile:\", error);\n    throw error; // Rethrow the error for further handling\n  }\n};\n\n// Export all authentication services including new ones\nconst authServices = {\n  signup,\n  login,\n  logout,\n  getCurrentUser,\n  isAuthenticated,\n  getProfile,\n  updateProfile\n};\n\n// Optionally expose it to the global window object for console access\nwindow.authServices = authServices;\nexport default authServices;","map":{"version":3,"names":["axios","API_URL","setAuthToken","token","defaults","headers","common","localStorage","getItem","signup","formData","response","post","data","jwt","setItem","JSON","stringify","error","_error$response","_error$response$data","_error$response$data$","console","errorMessage","message","Error","login","identifier","password","log","coordinator","userWithToken","_error$response2","_error$response2$data","_error$response2$data2","logout","removeItem","getCurrentUser","user","parse","isAuthenticated","getProfile","userId","get","Authorization","updateProfile","profileData","put","authServices","window"],"sources":["C:/Users/marmeeluv/Desktop/New folder/frontend/src/services/authServices.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:1337/api'; // Replace with your Strapi backend URL\r\n\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n      delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\nconst token = localStorage.getItem('token');\r\nsetAuthToken(token);\r\n\r\n// Register a new coordinator\r\nexport const signup = async (formData) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/coordinators/register`, { data: formData });\r\n      if (response.data.jwt) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n        console.error('Signup error:', error); // Log the entire error object\r\n        // Ensure to access the error response and get a meaningful message\r\n        const errorMessage = error.response?.data?.error?.message || 'Signup failed. Please try again.';\r\n        throw new Error(errorMessage); // Ensure this throws a string message\r\n      }\r\n};\r\n\r\n// Login a user (coordinator or admin)\r\nexport const login = async (identifier, password) => {\r\n  try {\r\n      const response = await axios.post('http://localhost:1337/api/coordinators/login', {\r\n          identifier,\r\n          password,\r\n      });\r\n\r\n      console.log(\"Logging in with:\", { identifier, password });\r\n      console.log('Response from API:', response.data);\r\n\r\n      const { coordinator, token } = response.data; // Make sure these keys match the API response\r\n\r\n      // If token is not returned, throw an error\r\n      if (!token) {\r\n          console.error('No token received from the server.');\r\n          throw new Error('Login failed, no token received.');\r\n      }\r\n\r\n      // Store user with JWT in local storage\r\n      const userWithToken = {\r\n          ...coordinator,\r\n          jwt: token // Add the JWT to the user object\r\n      };\r\n      \r\n      localStorage.setItem('user', JSON.stringify(userWithToken)); // Store the user with token\r\n\r\n      return userWithToken; // Return the user object with token\r\n  } catch (error) {\r\n      const errorMessage = error.response?.data?.error?.message || 'Error logging in. Please check your credentials';\r\n      console.error(\"Error during login:\", errorMessage);\r\n      throw new Error(errorMessage);\r\n  }\r\n};\r\n\r\n// Logout a user by removing the token from localStorage\r\nexport const logout = () => {\r\n  localStorage.removeItem('user');\r\n};\r\n\r\n// Get the current authenticated user from localStorage\r\nexport const getCurrentUser = () => {\r\n  const user = JSON.parse(localStorage.getItem('user')); // Retrieve the user object\r\n  return user; // Return user object which includes JWT\r\n};\r\n\r\n// Check if a user is authenticated by checking the presence of a token\r\nexport const isAuthenticated = () => {\r\n  const user = getCurrentUser();\r\n  return user && user.jwt ? true : false;\r\n};\r\n\r\n// Get the user profile by ID\r\nexport const getProfile = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/coordinators/${userId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${getCurrentUser().jwt}`, // Include the token in the headers\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching profile:', error);\r\n    throw new Error('Failed to fetch profile data');\r\n  }\r\n};\r\n\r\n// Update the user profile\r\nexport const updateProfile = async (userId, profileData) => {\r\n  try {\r\n      const response = await axios.put(`http://localhost:1337/api/coordinators/${userId}`, profileData);\r\n      return response.data; // Return the response data if the request is successful\r\n  } catch (error) {\r\n      console.error(\"Error updating profile:\", error);\r\n      throw error; // Rethrow the error for further handling\r\n  }\r\n};\r\n\r\n// Export all authentication services including new ones\r\nconst authServices = {\r\n  signup,\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n  isAuthenticated,\r\n  getProfile,\r\n  updateProfile,\r\n};\r\n\r\n// Optionally expose it to the global window object for console access\r\nwindow.authServices = authServices;\r\n\r\nexport default authServices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}