{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:1337/api'; // Replace with your Strapi backend URL\n\n// Register a new coordinator\nexport const signup = async formData => {\n  try {\n    const response = await axios.post(`${API_URL}/coordinators/register`, {\n      data: formData\n    });\n    if (response.data.jwt) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data, _error$response$data$;\n    console.error('Signup error:', error); // Log the entire error object\n    // Ensure to access the error response and get a meaningful message\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.error) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.message) || 'Signup failed. Please try again.';\n    throw new Error(errorMessage); // Ensure this throws a string message\n  }\n};\n\n// Login a user (coordinator or admin)\nexport const login = async (identifier, password) => {\n  try {\n    // Make a POST request to the backend with the identifier and password\n    const response = await axios.post('http://localhost:1337/api/coordinators/login', {\n      identifier,\n      password\n    });\n\n    // Log the details for debugging purposes\n    console.log(\"Logging in with:\", {\n      identifier,\n      password\n    });\n    console.log('Response from API:', response.data);\n    const {\n      coordinator,\n      token\n    } = response.data; // Adjusted to match backend response\n\n    // If token is not returned, throw an error\n    if (!token) {\n      console.error('No token received from the server.');\n      throw new Error('Login failed, no token received.');\n    }\n\n    // Return response data (user and token)\n    return {\n      user: coordinator,\n      token\n    }; // Return as an object to match AuthProvider expectations\n  } catch (error) {\n    var _error$response2, _error$response2$data, _error$response2$data2;\n    const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : (_error$response2$data2 = _error$response2$data.error) === null || _error$response2$data2 === void 0 ? void 0 : _error$response2$data2.message) || 'Error logging in. Please check your credentials';\n    console.error(\"Error during login:\", errorMessage);\n    throw new Error(errorMessage);\n  }\n};\n\n// Logout a user by removing the token from localStorage\nexport const logout = () => {\n  localStorage.removeItem('user');\n};\n\n// Get the current authenticated user from localStorage\nexport const getCurrentUser = () => {\n  return JSON.parse(localStorage.getItem('user'));\n};\n\n// Check if a user is authenticated by checking the presence of a token\nexport const isAuthenticated = () => {\n  const user = getCurrentUser();\n  return user && user.jwt ? true : false;\n};\n\n// Get the user profile by ID\nexport const getProfile = async userId => {\n  try {\n    const response = await axios.get(`${API_URL}/coordinators/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${getCurrentUser().jwt}` // Include the token in the headers\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching profile:', error);\n    throw new Error('Failed to fetch profile data');\n  }\n};\n\n// Update the user profile\nexport const updateProfile = async (userId, profileData) => {\n  try {\n    const token = getCurrentUser().jwt; // Get the token from localStorage\n    const response = await axios.put(`${API_URL}/coordinators/${userId}`, {\n      data: profileData\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}` // Include the token in the headers\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error updating profile:', error.response ? error.response.data : error.message);\n    throw new Error('Failed to update profile data');\n  }\n};\n\n// Export all authentication services including new ones\nconst authServices = {\n  signup,\n  login,\n  logout,\n  getCurrentUser,\n  isAuthenticated,\n  getProfile,\n  updateProfile\n};\nexport default authServices;","map":{"version":3,"names":["axios","API_URL","signup","formData","response","post","data","jwt","localStorage","setItem","JSON","stringify","error","_error$response","_error$response$data","_error$response$data$","console","errorMessage","message","Error","login","identifier","password","log","coordinator","token","user","_error$response2","_error$response2$data","_error$response2$data2","logout","removeItem","getCurrentUser","parse","getItem","isAuthenticated","getProfile","userId","get","headers","Authorization","updateProfile","profileData","put","authServices"],"sources":["C:/Users/marmeeluv/Desktop/New folder/frontend/src/services/authServices.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:1337/api'; // Replace with your Strapi backend URL\r\n\r\n// Register a new coordinator\r\nexport const signup = async (formData) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/coordinators/register`, { data: formData });\r\n      if (response.data.jwt) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n        console.error('Signup error:', error); // Log the entire error object\r\n        // Ensure to access the error response and get a meaningful message\r\n        const errorMessage = error.response?.data?.error?.message || 'Signup failed. Please try again.';\r\n        throw new Error(errorMessage); // Ensure this throws a string message\r\n      }\r\n};\r\n\r\n// Login a user (coordinator or admin)\r\nexport const login = async (identifier, password) => {\r\n  try {\r\n      // Make a POST request to the backend with the identifier and password\r\n      const response = await axios.post('http://localhost:1337/api/coordinators/login', {\r\n          identifier,\r\n          password,\r\n      });\r\n\r\n      // Log the details for debugging purposes\r\n      console.log(\"Logging in with:\", { identifier, password });\r\n      console.log('Response from API:', response.data);\r\n\r\n      const { coordinator, token } = response.data; // Adjusted to match backend response\r\n\r\n      // If token is not returned, throw an error\r\n      if (!token) {\r\n          console.error('No token received from the server.');\r\n          throw new Error('Login failed, no token received.');\r\n      }\r\n\r\n      // Return response data (user and token)\r\n      return { user: coordinator, token }; // Return as an object to match AuthProvider expectations\r\n\r\n  } catch (error) {\r\n      const errorMessage = error.response?.data?.error?.message || 'Error logging in. Please check your credentials';\r\n      console.error(\"Error during login:\", errorMessage);\r\n      throw new Error(errorMessage);\r\n  }\r\n};\r\n\r\n// Logout a user by removing the token from localStorage\r\nexport const logout = () => {\r\n  localStorage.removeItem('user');\r\n};\r\n\r\n// Get the current authenticated user from localStorage\r\nexport const getCurrentUser = () => {\r\n  return JSON.parse(localStorage.getItem('user'));\r\n};\r\n\r\n// Check if a user is authenticated by checking the presence of a token\r\nexport const isAuthenticated = () => {\r\n  const user = getCurrentUser();\r\n  return user && user.jwt ? true : false;\r\n};\r\n\r\n// Get the user profile by ID\r\nexport const getProfile = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/coordinators/${userId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${getCurrentUser().jwt}`, // Include the token in the headers\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching profile:', error);\r\n    throw new Error('Failed to fetch profile data');\r\n  }\r\n};\r\n\r\n// Update the user profile\r\nexport const updateProfile = async (userId, profileData) => {\r\n  try {\r\n      const token = getCurrentUser().jwt; // Get the token from localStorage\r\n      const response = await axios.put(`${API_URL}/coordinators/${userId}`, { data: profileData }, {\r\n          headers: {\r\n              Authorization: `Bearer ${token}`, // Include the token in the headers\r\n          },\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error('Error updating profile:', error.response ? error.response.data : error.message);\r\n      throw new Error('Failed to update profile data');\r\n  }\r\n};\r\n\r\n\r\n// Export all authentication services including new ones\r\nconst authServices = {\r\n  signup,\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n  isAuthenticated,\r\n  getProfile,\r\n  updateProfile,\r\n};\r\n\r\nexport default authServices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}