{"ast":null,"code":"// src/services/authServices.js\nimport axios from 'axios';\nconst API_URL = 'http://localhost:1337/api'; // Replace with your Strapi backend URL\n\n// Register a new coordinator\nexport const signup = async formData => {\n  try {\n    const response = await axios.post(`${API_URL}/coordinators/register`, {\n      coor_fname: formData.coor_fname,\n      coor_lname: formData.coor_lname,\n      username: formData.username,\n      coor_email: formData.coor_email,\n      coor_password: formData.coor_password,\n      coor_role: formData.coor_role\n    });\n\n    // If signup is successful, store the token\n    if (response.data.token) {\n      localStorage.setItem('user', JSON.stringify(response.data)); // Store user data in localStorage\n    }\n    return response.data; // Return response data for further processing\n  } catch (error) {\n    console.error('Signup error:', error);\n    // If there is an error, throw the error message from the response\n    throw error.response ? error.response.data : {\n      message: 'Unexpected error occurred.'\n    };\n  }\n};\n\n// Login a coordinator\nexport const login = async (email, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/coordinators/login`, {\n      coor_email: email,\n      // Send email instead of identifier\n      coor_password: password\n    });\n\n    // If login is successful, store the token\n    if (response.data.token) {\n      localStorage.setItem('user', JSON.stringify(response.data)); // Store user data in localStorage\n    }\n    return response.data; // Return response data for further processing\n  } catch (error) {\n    console.error('Login error:', error);\n    // If there is an error, throw the error message from the response\n    throw error.response ? error.response.data : {\n      message: 'Unexpected error occurred.'\n    };\n  }\n};\n\n// Logout a user by removing the token from localStorage\nexport const logout = () => {\n  localStorage.removeItem('user');\n};\n\n// Get the current authenticated user from localStorage\nexport const getCurrentUser = () => {\n  return JSON.parse(localStorage.getItem('user'));\n};\n\n// Check if a user is authenticated by checking the presence of a token\nexport const isAuthenticated = () => {\n  const user = getCurrentUser();\n  return user && user.token ? true : false; // Check for token in user data\n};\n\n// Export all authentication services\nconst authServices = {\n  signup,\n  login,\n  logout,\n  getCurrentUser,\n  isAuthenticated\n};\nexport default authServices;","map":{"version":3,"names":["axios","API_URL","signup","formData","response","post","coor_fname","coor_lname","username","coor_email","coor_password","coor_role","data","token","localStorage","setItem","JSON","stringify","error","console","message","login","email","password","logout","removeItem","getCurrentUser","parse","getItem","isAuthenticated","user","authServices"],"sources":["C:/Users/marmeeluv/Desktop/New folder/frontend/src/services/authServices.js"],"sourcesContent":["// src/services/authServices.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:1337/api'; // Replace with your Strapi backend URL\r\n\r\n// Register a new coordinator\r\nexport const signup = async (formData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/coordinators/register`, {\r\n      coor_fname: formData.coor_fname,\r\n      coor_lname: formData.coor_lname,\r\n      username: formData.username,\r\n      coor_email: formData.coor_email,\r\n      coor_password: formData.coor_password,\r\n      coor_role: formData.coor_role,\r\n    });\r\n\r\n    // If signup is successful, store the token\r\n    if (response.data.token) {\r\n      localStorage.setItem('user', JSON.stringify(response.data)); // Store user data in localStorage\r\n    }\r\n\r\n    return response.data; // Return response data for further processing\r\n  } catch (error) {\r\n    console.error('Signup error:', error);\r\n    // If there is an error, throw the error message from the response\r\n    throw error.response ? error.response.data : { message: 'Unexpected error occurred.' };\r\n  }\r\n};\r\n\r\n// Login a coordinator\r\nexport const login = async (email, password) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/coordinators/login`, {\r\n      coor_email: email, // Send email instead of identifier\r\n      coor_password: password,\r\n    });\r\n\r\n    // If login is successful, store the token\r\n    if (response.data.token) {\r\n      localStorage.setItem('user', JSON.stringify(response.data)); // Store user data in localStorage\r\n    }\r\n\r\n    return response.data; // Return response data for further processing\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    // If there is an error, throw the error message from the response\r\n    throw error.response ? error.response.data : { message: 'Unexpected error occurred.' };\r\n  }\r\n};\r\n\r\n// Logout a user by removing the token from localStorage\r\nexport const logout = () => {\r\n  localStorage.removeItem('user');\r\n};\r\n\r\n// Get the current authenticated user from localStorage\r\nexport const getCurrentUser = () => {\r\n  return JSON.parse(localStorage.getItem('user'));\r\n};\r\n\r\n// Check if a user is authenticated by checking the presence of a token\r\nexport const isAuthenticated = () => {\r\n  const user = getCurrentUser();\r\n  return user && user.token ? true : false; // Check for token in user data\r\n};\r\n\r\n// Export all authentication services\r\nconst authServices = {\r\n  signup,\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n  isAuthenticated,\r\n};\r\n\r\nexport default authServices;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;AACA,OAAO,MAAMC,MAAM,GAAG,MAAOC,QAAQ,IAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,wBAAwB,EAAE;MACpEK,UAAU,EAAEH,QAAQ,CAACG,UAAU;MAC/BC,UAAU,EAAEJ,QAAQ,CAACI,UAAU;MAC/BC,QAAQ,EAAEL,QAAQ,CAACK,QAAQ;MAC3BC,UAAU,EAAEN,QAAQ,CAACM,UAAU;MAC/BC,aAAa,EAAEP,QAAQ,CAACO,aAAa;MACrCC,SAAS,EAAER,QAAQ,CAACQ;IACtB,CAAC,CAAC;;IAEF;IACA,IAAIP,QAAQ,CAACQ,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACb,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/D;IAEA,OAAOR,QAAQ,CAACQ,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC;IACA,MAAMA,KAAK,CAACd,QAAQ,GAAGc,KAAK,CAACd,QAAQ,CAACQ,IAAI,GAAG;MAAEQ,OAAO,EAAE;IAA6B,CAAC;EACxF;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,qBAAqB,EAAE;MACjEQ,UAAU,EAAEa,KAAK;MAAE;MACnBZ,aAAa,EAAEa;IACjB,CAAC,CAAC;;IAEF;IACA,IAAInB,QAAQ,CAACQ,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACb,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/D;IAEA,OAAOR,QAAQ,CAACQ,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC;IACA,MAAMA,KAAK,CAACd,QAAQ,GAAGc,KAAK,CAACd,QAAQ,CAACQ,IAAI,GAAG;MAAEQ,OAAO,EAAE;IAA6B,CAAC;EACxF;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,MAAM,GAAGA,CAAA,KAAM;EAC1BV,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,OAAOV,IAAI,CAACW,KAAK,CAACb,YAAY,CAACc,OAAO,CAAC,MAAM,CAAC,CAAC;AACjD,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,IAAI,GAAGJ,cAAc,CAAC,CAAC;EAC7B,OAAOI,IAAI,IAAIA,IAAI,CAACjB,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC;AAC5C,CAAC;;AAED;AACA,MAAMkB,YAAY,GAAG;EACnB7B,MAAM;EACNmB,KAAK;EACLG,MAAM;EACNE,cAAc;EACdG;AACF,CAAC;AAED,eAAeE,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}