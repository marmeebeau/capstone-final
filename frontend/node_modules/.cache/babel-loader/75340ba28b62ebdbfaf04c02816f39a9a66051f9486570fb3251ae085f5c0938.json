{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:1337/api';\n\n// Function to set the authorization token in axios headers\nexport const setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\n// Register a new coordinator\nexport const signup = async formData => {\n  try {\n    const response = await axios.post(`${API_URL}/coordinators/register`, {\n      data: formData\n    });\n    if (response.data.jwt) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data, _error$response$data$;\n    console.error('Signup error:', error); // Log the entire error object\n    // Ensure to access the error response and get a meaningful message\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.error) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.message) || 'Signup failed. Please try again.';\n    throw new Error(errorMessage); // Ensure this throws a string message\n  }\n};\n\n// Login a user (coordinator or admin)\nexport const login = async (identifier, password) => {\n  try {\n    const response = await axios.post('http://localhost:1337/api/coordinators/login', {\n      identifier,\n      password\n    });\n\n    // Extract and log the token\n    const {\n      token\n    } = response.data; // Adjust according to your response structure\n    console.log('Retrieved token:', token); // Check if token is retrieved\n\n    // Store the token in localStorage after successful login\n    localStorage.setItem('token', response.data.token); // Save token to local storage\n\n    // Set token in Axios headers for future requests\n    setAuthToken(token);\n    return response.data;\n  } catch (error) {\n    console.error('Login failed:', error);\n    throw new Error('Login failed. Please check your credentials.');\n  }\n};\n\n// Logout a user by removing the token from localStorage\nexport const logout = () => {\n  localStorage.removeItem('user');\n};\n\n// Get the current authenticated user from localStorage\nconst getCurrentUser = () => {\n  const user = localStorage.getItem('user');\n  return user ? JSON.parse(user) : null;\n};\n\n// Check if a user is authenticated by checking the presence of a token\nexport const isAuthenticated = () => {\n  const user = getCurrentUser();\n  return user && user.jwt ? true : false;\n};\n\n// Get the user profile by ID\nexport const getProfile = async userId => {\n  try {\n    const response = await axios.get(`${API_URL}/coordinators/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${getCurrentUser().jwt}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching profile:', error);\n    throw new Error('Failed to fetch profile data');\n  }\n};\n\n// Update the user profile\nconst updateProfile = async (userId, profileData) => {\n  try {\n    const response = await axios.put(`/coordinators/${userId}`, {\n      data: profileData\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error(\"Error updating profile:\", error);\n    const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || \"An error occurred. Please try again.\";\n    throw new Error(errorMessage); // Optionally throw the error\n  }\n};\n\n// Export all authentication services including new ones\nconst authServices = {\n  signup,\n  login,\n  logout,\n  getCurrentUser,\n  isAuthenticated,\n  getProfile,\n  updateProfile,\n  setAuthToken\n};\n\n// Optionally expose it to the global window object for console access\nwindow.authServices = authServices;\nexport default authServices;","map":{"version":3,"names":["axios","API_URL","setAuthToken","token","defaults","headers","common","signup","formData","response","post","data","jwt","localStorage","setItem","JSON","stringify","error","_error$response","_error$response$data","_error$response$data$","console","errorMessage","message","Error","login","identifier","password","log","logout","removeItem","getCurrentUser","user","getItem","parse","isAuthenticated","getProfile","userId","get","Authorization","updateProfile","profileData","put","_error$response2","_error$response2$data","authServices","window"],"sources":["C:/Users/marmeeluv/Desktop/New folder/frontend/src/services/authServices.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:1337/api'; \r\n\r\n// Function to set the authorization token in axios headers\r\nexport const setAuthToken = (token) => {\r\n  if (token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n      delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\n// Register a new coordinator\r\nexport const signup = async (formData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/coordinators/register`, { data: formData });\r\n    if (response.data.jwt) {\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n      console.error('Signup error:', error); // Log the entire error object\r\n      // Ensure to access the error response and get a meaningful message\r\n      const errorMessage = error.response?.data?.error?.message || 'Signup failed. Please try again.';\r\n      throw new Error(errorMessage); // Ensure this throws a string message\r\n    }\r\n};\r\n\r\n\r\n// Login a user (coordinator or admin)\r\nexport const login = async (identifier, password) => {\r\n  try {\r\n      const response = await axios.post('http://localhost:1337/api/coordinators/login', {\r\n          identifier,\r\n          password,\r\n      });\r\n\r\n        // Extract and log the token\r\n        const { token } = response.data; // Adjust according to your response structure\r\n        console.log('Retrieved token:', token); // Check if token is retrieved\r\n\r\n        // Store the token in localStorage after successful login\r\n        localStorage.setItem('token', response.data.token); // Save token to local storage\r\n        \r\n        // Set token in Axios headers for future requests\r\n        setAuthToken(token);\r\n\r\n        return response.data;\r\n  } catch (error) {\r\n    console.error('Login failed:', error);\r\n    throw new Error('Login failed. Please check your credentials.');\r\n}\r\n};\r\n\r\n// Logout a user by removing the token from localStorage\r\nexport const logout = () => {\r\n  localStorage.removeItem('user');\r\n};\r\n\r\n// Get the current authenticated user from localStorage\r\nconst getCurrentUser = () => {\r\n  const user = localStorage.getItem('user');\r\n  return user ? JSON.parse(user) : null;\r\n};\r\n\r\n// Check if a user is authenticated by checking the presence of a token\r\nexport const isAuthenticated = () => {\r\n  const user = getCurrentUser();\r\n  return user && user.jwt ? true : false;\r\n};\r\n\r\n// Get the user profile by ID\r\nexport const getProfile = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/coordinators/${userId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${getCurrentUser().jwt}`,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching profile:', error);\r\n    throw new Error('Failed to fetch profile data');\r\n  }\r\n};\r\n\r\n// Update the user profile\r\nconst updateProfile = async (userId, profileData) => {\r\n  try {\r\n      const response = await axios.put(`/coordinators/${userId}`, { data: profileData });\r\n      return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error updating profile:\", error);\r\n    const errorMessage = error.response?.data?.message || error.message || \"An error occurred. Please try again.\";\r\n    throw new Error(errorMessage); // Optionally throw the error\r\n  }\r\n};\r\n\r\n// Export all authentication services including new ones\r\nconst authServices = {\r\n  signup,\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n  isAuthenticated,\r\n  getProfile,\r\n  updateProfile,\r\n  setAuthToken,\r\n};\r\n\r\n\r\n// Optionally expose it to the global window object for console access\r\nwindow.authServices = authServices;\r\n\r\nexport default authServices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}