{"ast":null,"code":"import axios from 'axios';\nimport authServices from '../services/authServices'; // For retrieving the token\n\nconst API_URL = 'http://localhost:1337/api/coordinators'; // Base URL for coordinators\n\n// Fetch all users (coordinators/admins)\nconst getAllUsers = async () => {\n  try {\n    const user = authServices.getCurrentUser(); // Get user from localStorage\n    console.log(\"Current User:\", user); // Debugging: Log the current user\n\n    if (!user || !user.token) {\n      throw new Error('User not authenticated'); // Check if token exists\n    }\n    const response = await axios.get(API_URL, {\n      headers: {\n        Authorization: `Bearer ${user.token}` // Send token in Authorization header\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    console.error('Error fetching users:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch users');\n  }\n};\n\n// Fetch a single user by ID\nconst getUserById = async userId => {\n  try {\n    const user = authServices.getCurrentUser(); // Get user from localStorage\n    if (!user || !user.token) {\n      throw new Error('User not authenticated'); // Check if token exists\n    }\n    const response = await axios.get(`${API_URL}/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${user.token}` // Use the token from user object\n      }\n    });\n    return response.data; // Return the response data directly\n  } catch (error) {\n    var _error$response3, _error$response4, _error$response4$data;\n    console.error('Error fetching user:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch user');\n  }\n};\n\n// Create a new user (admin/coordinator)\nconst createUser = async userData => {\n  try {\n    const user = authServices.getCurrentUser(); // Get user from localStorage\n    if (!user || !user.token) {\n      throw new Error('User not authenticated'); // Check if token exists\n    }\n    const response = await axios.post(API_URL, {\n      data: userData\n    }, {\n      headers: {\n        Authorization: `Bearer ${user.token}` // Use the token from user object\n      }\n    });\n    return response.data; // Return the response data directly\n  } catch (error) {\n    var _error$response5, _error$response6, _error$response6$data;\n    console.error('Error creating user:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to create user');\n  }\n};\n\n// Update a user by ID\nconst updateUser = async (userId, userData) => {\n  try {\n    const user = authServices.getCurrentUser(); // Get user from localStorage\n    if (!user || !user.token) {\n      throw new Error('User not authenticated'); // Check if token exists\n    }\n    const response = await axios.put(`${API_URL}/${userId}`, {\n      data: userData\n    }, {\n      headers: {\n        Authorization: `Bearer ${user.token}` // Use the token from user object\n      }\n    });\n    return response.data; // Return the response data directly\n  } catch (error) {\n    var _error$response7, _error$response8, _error$response8$data;\n    console.error('Error updating user:', ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message);\n    throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to update user');\n  }\n};\n\n// Delete a user by ID\nconst deleteUser = async userId => {\n  try {\n    const user = authServices.getCurrentUser(); // Get user from localStorage\n    if (!user || !user.token) {\n      throw new Error('User not authenticated'); // Check if token exists\n    }\n    const response = await axios.delete(`${API_URL}/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${user.token}` // Use the token from user object\n      }\n    });\n    return response.data; // Return the response data directly\n  } catch (error) {\n    var _error$response9, _error$response10, _error$response10$dat;\n    console.error('Error deleting user:', ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error.message);\n    throw new Error(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Failed to delete user');\n  }\n};\n\n// Export all user services\nconst userServices = {\n  getAllUsers,\n  getUserById,\n  createUser,\n  updateUser,\n  deleteUser\n};\nexport default userServices;","map":{"version":3,"names":["axios","authServices","API_URL","getAllUsers","user","getCurrentUser","console","log","token","Error","response","get","headers","Authorization","data","error","_error$response","_error$response2","_error$response2$data","message","getUserById","userId","_error$response3","_error$response4","_error$response4$data","createUser","userData","post","_error$response5","_error$response6","_error$response6$data","updateUser","put","_error$response7","_error$response8","_error$response8$data","deleteUser","delete","_error$response9","_error$response10","_error$response10$dat","userServices"],"sources":["C:/Users/marmeeluv/Desktop/capstone-final/frontend/src/services/UserServices.js"],"sourcesContent":["import axios from 'axios';\r\nimport authServices from '../services/authServices';  // For retrieving the token\r\n\r\nconst API_URL = 'http://localhost:1337/api/coordinators';  // Base URL for coordinators\r\n\r\n// Fetch all users (coordinators/admins)\r\nconst getAllUsers = async () => {\r\n    try {\r\n      const user = authServices.getCurrentUser(); // Get user from localStorage\r\n      console.log(\"Current User:\", user); // Debugging: Log the current user\r\n  \r\n      if (!user || !user.token) {\r\n        throw new Error('User not authenticated'); // Check if token exists\r\n      }\r\n  \r\n      const response = await axios.get(API_URL, {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`, // Send token in Authorization header\r\n        },\r\n      });\r\n  \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error.response?.data || error.message);\r\n      throw new Error(error.response?.data?.message || 'Failed to fetch users');\r\n    }\r\n  };\r\n\r\n// Fetch a single user by ID\r\nconst getUserById = async (userId) => {\r\n  try {\r\n    const user = authServices.getCurrentUser(); // Get user from localStorage\r\n    if (!user || !user.token) {\r\n      throw new Error('User not authenticated'); // Check if token exists\r\n    }\r\n\r\n    const response = await axios.get(`${API_URL}/${userId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`, // Use the token from user object\r\n      },\r\n    });\r\n    return response.data; // Return the response data directly\r\n  } catch (error) {\r\n    console.error('Error fetching user:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch user');\r\n  }\r\n};\r\n\r\n// Create a new user (admin/coordinator)\r\nconst createUser = async (userData) => {\r\n  try {\r\n    const user = authServices.getCurrentUser(); // Get user from localStorage\r\n    if (!user || !user.token) {\r\n      throw new Error('User not authenticated'); // Check if token exists\r\n    }\r\n\r\n    const response = await axios.post(API_URL, { data: userData }, {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`, // Use the token from user object\r\n      },\r\n    });\r\n    return response.data; // Return the response data directly\r\n  } catch (error) {\r\n    console.error('Error creating user:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to create user');\r\n  }\r\n};\r\n\r\n// Update a user by ID\r\nconst updateUser = async (userId, userData) => {\r\n  try {\r\n    const user = authServices.getCurrentUser(); // Get user from localStorage\r\n    if (!user || !user.token) {\r\n      throw new Error('User not authenticated'); // Check if token exists\r\n    }\r\n\r\n    const response = await axios.put(`${API_URL}/${userId}`, { data: userData }, {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`, // Use the token from user object\r\n      },\r\n    });\r\n    return response.data; // Return the response data directly\r\n  } catch (error) {\r\n    console.error('Error updating user:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to update user');\r\n  }\r\n};\r\n\r\n// Delete a user by ID\r\nconst deleteUser = async (userId) => {\r\n  try {\r\n    const user = authServices.getCurrentUser(); // Get user from localStorage\r\n    if (!user || !user.token) {\r\n      throw new Error('User not authenticated'); // Check if token exists\r\n    }\r\n\r\n    const response = await axios.delete(`${API_URL}/${userId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`, // Use the token from user object\r\n      },\r\n    });\r\n    return response.data; // Return the response data directly\r\n  } catch (error) {\r\n    console.error('Error deleting user:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to delete user');\r\n  }\r\n};\r\n\r\n// Export all user services\r\nconst userServices = {\r\n  getAllUsers,\r\n  getUserById,\r\n  createUser,\r\n  updateUser,\r\n  deleteUser,\r\n};\r\n\r\nexport default userServices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}