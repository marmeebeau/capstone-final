{"ast":null,"code":"// src/services/UserServices.js\nimport axios from 'axios';\nimport authServices from './authServices'; // For retrieving the token\n\nconst API_URL = 'http://localhost:1337/api/coordinators'; // Base URL for coordinators\n\n// Fetch all users (coordinators/admins)\nconst getAllUsers = async () => {\n  try {\n    // Retrieve the current user, which should contain the token\n    const user = authServices.getCurrentUser(); // Get current user from localStorage\n\n    // Check if user and token are available\n    if (!user || !user.token) {\n      throw new Error('User not authenticated'); // Error if token is missing\n    }\n\n    // Make the API call with the token\n    const response = await axios.get(API_URL, {\n      headers: {\n        Authorization: `Bearer ${user.token}` // Ensure the correct token is sent\n      }\n    });\n    return response.data; // Return the data on success\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    console.error('Error fetching users:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message); // Log any errors\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch users'); // Throw error if fetching fails\n  }\n};\n\n// Fetch a single user by ID\nconst getUserById = async userId => {\n  try {\n    const token = authServices.getCurrentUser().jwt;\n    const response = await axios.get(`${API_URL}/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response4, _error$response4$data;\n    console.error('Error fetching user:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch user');\n  }\n};\n\n// Create a new user (admin/coordinator)\nconst createUser = async userData => {\n  try {\n    const token = authServices.getCurrentUser().jwt;\n    const response = await axios.post(API_URL, {\n      data: userData\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response5, _error$response6, _error$response6$data;\n    console.error('Error creating user:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to create user');\n  }\n};\n\n// Update a user by ID\nconst updateUser = async (userId, userData) => {\n  try {\n    const token = authServices.getCurrentUser().jwt;\n    const response = await axios.put(`${API_URL}/${userId}`, {\n      data: userData\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response7, _error$response8, _error$response8$data;\n    console.error('Error updating user:', ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message);\n    throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to update user');\n  }\n};\n\n// Delete a user by ID\nconst deleteUser = async userId => {\n  try {\n    const token = authServices.getCurrentUser().jwt;\n    const response = await axios.delete(`${API_URL}/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response9, _error$response10, _error$response10$dat;\n    console.error('Error deleting user:', ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error.message);\n    throw new Error(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Failed to delete user');\n  }\n};\n\n// Assign object to a variable first\nconst userServices = {\n  getAllUsers,\n  getUserById,\n  createUser,\n  updateUser,\n  deleteUser\n};\n\n// Then export the variable\nexport default userServices;","map":{"version":3,"names":["axios","authServices","API_URL","getAllUsers","user","getCurrentUser","token","Error","response","get","headers","Authorization","data","error","_error$response","_error$response2","_error$response2$data","console","message","getUserById","userId","jwt","_error$response3","_error$response4","_error$response4$data","createUser","userData","post","_error$response5","_error$response6","_error$response6$data","updateUser","put","_error$response7","_error$response8","_error$response8$data","deleteUser","delete","_error$response9","_error$response10","_error$response10$dat","userServices"],"sources":["C:/Users/marmeeluv/Desktop/capstone-final/frontend/src/services/UserServices.js"],"sourcesContent":["// src/services/UserServices.js\r\nimport axios from 'axios';\r\nimport authServices from './authServices';  // For retrieving the token\r\n\r\nconst API_URL = 'http://localhost:1337/api/coordinators';  // Base URL for coordinators\r\n\r\n// Fetch all users (coordinators/admins)\r\nconst getAllUsers = async () => {\r\n    try {\r\n      // Retrieve the current user, which should contain the token\r\n      const user = authServices.getCurrentUser(); // Get current user from localStorage\r\n  \r\n      // Check if user and token are available\r\n      if (!user || !user.token) {\r\n        throw new Error('User not authenticated'); // Error if token is missing\r\n      }\r\n  \r\n      // Make the API call with the token\r\n      const response = await axios.get(API_URL, {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`, // Ensure the correct token is sent\r\n        },\r\n      });\r\n      \r\n      return response.data; // Return the data on success\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error.response?.data || error.message); // Log any errors\r\n      throw new Error(error.response?.data?.message || 'Failed to fetch users'); // Throw error if fetching fails\r\n    }\r\n  };\r\n\r\n// Fetch a single user by ID\r\nconst getUserById = async (userId) => {\r\n  try {\r\n    const token = authServices.getCurrentUser().jwt;\r\n    const response = await axios.get(`${API_URL}/${userId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching user:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch user');\r\n  }\r\n};\r\n\r\n// Create a new user (admin/coordinator)\r\nconst createUser = async (userData) => {\r\n  try {\r\n    const token = authServices.getCurrentUser().jwt;\r\n    const response = await axios.post(API_URL, { data: userData }, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating user:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to create user');\r\n  }\r\n};\r\n\r\n// Update a user by ID\r\nconst updateUser = async (userId, userData) => {\r\n  try {\r\n    const token = authServices.getCurrentUser().jwt;\r\n    const response = await axios.put(`${API_URL}/${userId}`, { data: userData }, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating user:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to update user');\r\n  }\r\n};\r\n\r\n// Delete a user by ID\r\nconst deleteUser = async (userId) => {\r\n  try {\r\n    const token = authServices.getCurrentUser().jwt;\r\n    const response = await axios.delete(`${API_URL}/${userId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error deleting user:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to delete user');\r\n  }\r\n};\r\n\r\n// Assign object to a variable first\r\nconst userServices = {\r\n  getAllUsers,\r\n  getUserById,\r\n  createUser,\r\n  updateUser,\r\n  deleteUser,\r\n};\r\n\r\n// Then export the variable\r\nexport default userServices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}