{"ast":null,"code":"import axios from 'axios';\nimport authServices from '../services/authServices'; // For retrieving the token\n\nconst API_URL = 'http://localhost:1337/api'; // Base URL for coordinators\n\n// Fetch all users (coordinators/admins)\nexport const getAllUsers = async () => {\n  const user = getCurrentUser(); // Retrieve current user\n  if (!user || !user.jwt) {\n    throw new Error('User not authenticated'); // Ensure user is authenticated\n  }\n  setAuthToken(user.jwt); // Set token for requests\n\n  try {\n    const response = await axios.get(`${API_URL}/coordinators`); // Adjust endpoint accordingly\n    return response.data; // Return user data\n  } catch (error) {\n    console.error('Error fetching users:', error); // Log error\n    throw new Error('Error fetching users'); // Throw meaningful error\n  }\n};\n\n// Fetch a single user by ID\nconst getUserById = async userId => {\n  try {\n    const user = authServices.getCurrentUser(); // Get user from localStorage\n    if (!user || !user.token) {\n      throw new Error('User not authenticated'); // Check if token exists\n    }\n    const response = await axios.get(`${API_URL}/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${user.token}` // Use the token from user object\n      }\n    });\n    return response.data; // Return the response data directly\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    console.error('Error fetching user:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch user');\n  }\n};\n\n// Create a new user (admin/coordinator)\nconst createUser = async userData => {\n  try {\n    const user = authServices.getCurrentUser(); // Get user from localStorage\n    if (!user || !user.token) {\n      throw new Error('User not authenticated'); // Check if token exists\n    }\n    const response = await axios.post(API_URL, {\n      data: userData\n    }, {\n      headers: {\n        Authorization: `Bearer ${user.token}` // Use the token from user object\n      }\n    });\n    return response.data; // Return the response data directly\n  } catch (error) {\n    var _error$response3, _error$response4, _error$response4$data;\n    console.error('Error creating user:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to create user');\n  }\n};\n\n// Update a user by ID\nconst updateUser = async (userId, userData) => {\n  try {\n    const user = authServices.getCurrentUser(); // Get user from localStorage\n    if (!user || !user.token) {\n      throw new Error('User not authenticated'); // Check if token exists\n    }\n    const response = await axios.put(`${API_URL}/${userId}`, {\n      data: userData\n    }, {\n      headers: {\n        Authorization: `Bearer ${user.token}` // Use the token from user object\n      }\n    });\n    return response.data; // Return the response data directly\n  } catch (error) {\n    var _error$response5, _error$response6, _error$response6$data;\n    console.error('Error updating user:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to update user');\n  }\n};\n\n// Delete a user by ID\nconst deleteUser = async userId => {\n  try {\n    const user = authServices.getCurrentUser(); // Get user from localStorage\n    if (!user || !user.token) {\n      throw new Error('User not authenticated'); // Check if token exists\n    }\n    const response = await axios.delete(`${API_URL}/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${user.token}` // Use the token from user object\n      }\n    });\n    return response.data; // Return the response data directly\n  } catch (error) {\n    var _error$response7, _error$response8, _error$response8$data;\n    console.error('Error deleting user:', ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message);\n    throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to delete user');\n  }\n};\n\n// Export all user services\nconst userServices = {\n  getAllUsers,\n  getUserById,\n  createUser,\n  updateUser,\n  deleteUser\n};\nexport default userServices;","map":{"version":3,"names":["axios","authServices","API_URL","getAllUsers","user","getCurrentUser","jwt","Error","setAuthToken","response","get","data","error","console","getUserById","userId","token","headers","Authorization","_error$response","_error$response2","_error$response2$data","message","createUser","userData","post","_error$response3","_error$response4","_error$response4$data","updateUser","put","_error$response5","_error$response6","_error$response6$data","deleteUser","delete","_error$response7","_error$response8","_error$response8$data","userServices"],"sources":["C:/Users/marmeeluv/Desktop/capstone-final/frontend/src/services/UserServices.js"],"sourcesContent":["import axios from 'axios';\r\nimport authServices from '../services/authServices';  // For retrieving the token\r\n\r\nconst API_URL = 'http://localhost:1337/api';  // Base URL for coordinators\r\n\r\n// Fetch all users (coordinators/admins)\r\nexport const getAllUsers = async () => {\r\n    const user = getCurrentUser(); // Retrieve current user\r\n    if (!user || !user.jwt) {\r\n        throw new Error('User not authenticated'); // Ensure user is authenticated\r\n    }\r\n\r\n    setAuthToken(user.jwt); // Set token for requests\r\n\r\n    try {\r\n        const response = await axios.get(`${API_URL}/coordinators`); // Adjust endpoint accordingly\r\n        return response.data; // Return user data\r\n    } catch (error) {\r\n        console.error('Error fetching users:', error); // Log error\r\n        throw new Error('Error fetching users'); // Throw meaningful error\r\n    }\r\n};\r\n\r\n// Fetch a single user by ID\r\nconst getUserById = async (userId) => {\r\n  try {\r\n    const user = authServices.getCurrentUser(); // Get user from localStorage\r\n    if (!user || !user.token) {\r\n      throw new Error('User not authenticated'); // Check if token exists\r\n    }\r\n\r\n    const response = await axios.get(`${API_URL}/${userId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`, // Use the token from user object\r\n      },\r\n    });\r\n    return response.data; // Return the response data directly\r\n  } catch (error) {\r\n    console.error('Error fetching user:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch user');\r\n  }\r\n};\r\n\r\n// Create a new user (admin/coordinator)\r\nconst createUser = async (userData) => {\r\n  try {\r\n    const user = authServices.getCurrentUser(); // Get user from localStorage\r\n    if (!user || !user.token) {\r\n      throw new Error('User not authenticated'); // Check if token exists\r\n    }\r\n\r\n    const response = await axios.post(API_URL, { data: userData }, {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`, // Use the token from user object\r\n      },\r\n    });\r\n    return response.data; // Return the response data directly\r\n  } catch (error) {\r\n    console.error('Error creating user:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to create user');\r\n  }\r\n};\r\n\r\n// Update a user by ID\r\nconst updateUser = async (userId, userData) => {\r\n  try {\r\n    const user = authServices.getCurrentUser(); // Get user from localStorage\r\n    if (!user || !user.token) {\r\n      throw new Error('User not authenticated'); // Check if token exists\r\n    }\r\n\r\n    const response = await axios.put(`${API_URL}/${userId}`, { data: userData }, {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`, // Use the token from user object\r\n      },\r\n    });\r\n    return response.data; // Return the response data directly\r\n  } catch (error) {\r\n    console.error('Error updating user:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to update user');\r\n  }\r\n};\r\n\r\n// Delete a user by ID\r\nconst deleteUser = async (userId) => {\r\n  try {\r\n    const user = authServices.getCurrentUser(); // Get user from localStorage\r\n    if (!user || !user.token) {\r\n      throw new Error('User not authenticated'); // Check if token exists\r\n    }\r\n\r\n    const response = await axios.delete(`${API_URL}/${userId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`, // Use the token from user object\r\n      },\r\n    });\r\n    return response.data; // Return the response data directly\r\n  } catch (error) {\r\n    console.error('Error deleting user:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to delete user');\r\n  }\r\n};\r\n\r\n// Export all user services\r\nconst userServices = {\r\n  getAllUsers,\r\n  getUserById,\r\n  createUser,\r\n  updateUser,\r\n  deleteUser,\r\n};\r\n\r\nexport default userServices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}