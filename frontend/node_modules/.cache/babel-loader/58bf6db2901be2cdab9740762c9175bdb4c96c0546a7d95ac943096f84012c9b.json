{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marmeeluv\\\\Desktop\\\\New folder\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.jsx\nimport React, { createContext, useContext, useState } from 'react';\nimport authServices from '../services/authServices';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize user state\n  const [user, setUser] = useState(() => {\n    // Get user from local storage on initial load\n    const storedUserData = localStorage.getItem('user'); // Renamed to avoid confusion\n    return storedUserData ? JSON.parse(storedUserData) : null; // Parse user data if exists\n  });\n\n  // Login function\n  const login = async (identifier, password) => {\n    try {\n      const {\n        user,\n        token\n      } = await authServices.login(identifier, password);\n      setUser(user); // Set user data in state\n      localStorage.setItem('token', token); // Store token in local storage\n      localStorage.setItem('user', JSON.stringify(user)); // Store user in local storage\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error; // Rethrow the error for handling in the component\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user'); // Remove user from local storage\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"Bnd+j8fwDkkXHXjTZubbMz9Rmic=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","authServices","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","storedUserData","localStorage","getItem","JSON","parse","login","identifier","password","token","setItem","stringify","error","console","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/marmeeluv/Desktop/New folder/frontend/src/context/AuthContext.jsx"],"sourcesContent":["// src/context/AuthContext.jsx\r\nimport React, { createContext, useContext, useState } from 'react';\r\nimport authServices from '../services/authServices';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    // Initialize user state\r\n    const [user, setUser] = useState(() => {\r\n        // Get user from local storage on initial load\r\n        const storedUserData = localStorage.getItem('user'); // Renamed to avoid confusion\r\n        return storedUserData ? JSON.parse(storedUserData) : null; // Parse user data if exists\r\n    });\r\n\r\n    // Login function\r\n    const login = async (identifier, password) => {\r\n        try {\r\n            const { user, token } = await authServices.login(identifier, password);\r\n            setUser(user); // Set user data in state\r\n            localStorage.setItem('token', token); // Store token in local storage\r\n            localStorage.setItem('user', JSON.stringify(user)); // Store user in local storage\r\n        } catch (error) {\r\n            console.error(\"Login failed:\", error);\r\n            throw error; // Rethrow the error for handling in the component\r\n        }\r\n    };\r\n\r\n    // Logout function\r\n    const logout = () => {\r\n        setUser(null);\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user'); // Remove user from local storage\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,OAAOC,YAAY,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,MAAM;IACnC;IACA,MAAMU,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IACrD,OAAOF,cAAc,GAAGG,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;EAC/D,CAAC,CAAC;;EAEF;EACA,MAAMK,KAAK,GAAG,MAAAA,CAAOC,UAAU,EAAEC,QAAQ,KAAK;IAC1C,IAAI;MACA,MAAM;QAAET,IAAI;QAAEU;MAAM,CAAC,GAAG,MAAMjB,YAAY,CAACc,KAAK,CAACC,UAAU,EAAEC,QAAQ,CAAC;MACtER,OAAO,CAACD,IAAI,CAAC,CAAC,CAAC;MACfG,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC,CAAC,CAAC;MACtCP,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACZ,IAAI,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC,OAAOa,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK,CAAC,CAAC;IACjB;EACJ,CAAC;;EAED;EACA,MAAME,MAAM,GAAGA,CAAA,KAAM;IACjBd,OAAO,CAAC,IAAI,CAAC;IACbE,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;IAChCb,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;EACrC,CAAC;EAED,oBACIrB,OAAA,CAACC,WAAW,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAElB,IAAI;MAAEO,KAAK;MAAEQ;IAAO,CAAE;IAAAjB,QAAA,EAChDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACvB,EAAA,CAjCWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAmCzB,OAAO,MAAM2B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMlC,UAAU,CAACK,WAAW,CAAC;AAAA;AAAC6B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}